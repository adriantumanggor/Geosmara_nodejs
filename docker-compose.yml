version: '3.8'

services:
  # Node.js API Service
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: geos-api
    volumes:
      - ./api:/app:Z
      - /app/node_modules
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=${NODE_ENV}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_NAME=${POSTGRES_DB}
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - geos-network

  # PostgreSQL Service
  postgres:
    image: postgres:14
    container_name: geos-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:Z
    restart: unless-stopped
    networks:
      - geos-network

  # pgAdmin Service
  pgadmin:
    image: dpage/pgadmin4
    container_name: geos-pgadmin
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD}
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - geos-network

networks:
  geos-network:
    driver: bridge

volumes:
  postgres-data:
  pgadmin-data: